import React, { useState } from 'react';
import {
  Box,
  Container,
  VStack,
  HStack,
  Button,
  useToast,
  useColorModeValue,
  useDisclosure,
  Text,
  Heading,
  Badge,
  Icon,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
} from '@chakra-ui/react';
import { ViewIcon, ChevronDownIcon } from '@chakra-ui/icons';
import { CommandBar } from '../components/CommandBar';
import { DraftViewer } from '../components/DraftViewer';
import { GuardrailBanner } from '../components/GuardrailBanner';
import { EditModal } from '../components/EditModal';
import { AgentStatusModal } from '../components/AgentStatusModal';
import { incidentService, DraftResponse } from '../services/incidentService';

export const Dashboard: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [currentDraft, setCurrentDraft] = useState<DraftResponse | null>(null);
  const [currentIncidentId, setCurrentIncidentId] = useState<string>('');
  const [isPublishing, setIsPublishing] = useState(false);
  const [isChangingTone, setIsChangingTone] = useState(false);
  const [approvalStatus, setApprovalStatus] = useState<'none' | 'pending' | 'approved' | 'rejected'>('none');
  const [isRequestingApproval, setIsRequestingApproval] = useState(false);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();

  const bgColor = useColorModeValue('gray.50', 'gray.900');
  const channelHeaderBg = useColorModeValue('white', 'gray.800');
  const hasLeaks = currentDraft?.leaks && currentDraft.leaks.length > 0;

  const toneOptions = [
    { value: 'professional', label: '💼 Professional', description: 'Formal and standard' },
    { value: 'casual', label: '😊 Casual', description: 'Friendly and approachable' },
    { value: 'urgent', label: '🚨 Urgent', description: 'Direct and immediate' },
    { value: 'reassuring', label: '🤝 Reassuring', description: 'Calm and supportive' },
    { value: 'technical', label: '🔧 Technical', description: 'Detailed and precise' },
  ];

  const handleCommand = async (command: string, args: string[]) => {
    if (command === 'generate-draft' && args.length > 0) {
      const incidentId = args[0];
      setCurrentIncidentId(incidentId);
      setApprovalStatus('none'); // Reset approval status for new incident
      
      try {
        setIsLoading(true);
        const response = await incidentService.generateDraft(incidentId);
        setCurrentDraft(response);
        
        toast({
          title: 'Draft Generated by @incident-bot',
          description: `Status draft for ${incidentId} generated in ${response.latency_ms}ms`,
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      } catch (error) {
        console.error('Error generating draft:', error);
        toast({
          title: 'Generation Failed',
          description: 'Could not generate the status draft. Please try again.',
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleToneChange = async (tone: string) => {
    if (!currentIncidentId) return;
    
    setApprovalStatus('none'); // Reset approval when tone changes
    
    try {
      setIsChangingTone(true);
      const response = await incidentService.generateDraft(currentIncidentId, tone);
      setCurrentDraft(response);
      
      const toneLabel = toneOptions.find(t => t.value === tone)?.label || tone;
      toast({
        title: `Tone Changed to ${toneLabel}`,
        description: `New draft generated in ${response.latency_ms}ms`,
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error('Error changing tone:', error);
      toast({
        title: 'Tone Change Failed',
        description: 'Could not regenerate with new tone. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsChangingTone(false);
    }
  };

  const handleRequestApproval = async () => {
    setIsRequestingApproval(true);
    setApprovalStatus('pending');
    
    toast({
      title: 'Approval Requested',
      description: 'Escalating to incident commander and communications lead...',
      status: 'info',
      duration: 3000,
      isClosable: true,
    });

    // Simulate approval workflow delay (3-8 seconds)
    const approvalDelay = Math.random() * 5000 + 3000;
    
    setTimeout(() => {
      // 85% chance of approval, 15% chance of rejection
      const approved = Math.random() > 0.15;
      
      if (approved) {
        setApprovalStatus('approved');
        toast({
          title: '✅ Approval Granted',
          description: 'Communications team has approved the status update for publication',
          status: 'success',
          duration: 4000,
          isClosable: true,
        });
      } else {
        setApprovalStatus('rejected');
        toast({
          title: '❌ Approval Rejected',
          description: 'Please revise the draft and resubmit for approval',
          status: 'warning',
          duration: 4000,
          isClosable: true,
        });
      }
      
      setIsRequestingApproval(false);
    }, approvalDelay);
  };

  const handlePublish = async () => {
    if (!currentDraft?.draft || hasLeaks) {
      return;
    }

    // Check if high-severity incident requires approval
    const requiresApproval = currentIncidentId.includes('123') || currentIncidentId.includes('456'); // Mock logic
    if (requiresApproval && approvalStatus !== 'approved') {
      toast({
        title: 'Approval Required',
        description: 'High-severity incidents require management approval before publishing',
        status: 'warning',
        duration: 4000,
        isClosable: true,
      });
      return;
    }

    try {
      setIsPublishing(true);
      await incidentService.publishUpdate(currentDraft.draft);
      
      toast({
        title: 'Status Published',
        description: 'Your status update has been posted to #status-page',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      
      // Clear the current draft after successful publish
      setCurrentDraft(null);
      setApprovalStatus('none');
      setCurrentIncidentId('');
    } catch (error) {
      console.error('Error publishing update:', error);
      toast({
        title: 'Publish Failed',
        description: 'Could not publish the status update. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsPublishing(false);
    }
  };

  const handleEditSave = (editedDraft: string) => {
    if (currentDraft) {
      setCurrentDraft({
        ...currentDraft,
        draft: editedDraft,
        leaks: [], // Assume validation passed in the modal
      });
      // Reset approval when draft is edited
      if (approvalStatus === 'approved') {
        setApprovalStatus('none');
        toast({
          title: 'Re-approval Required',
          description: 'Draft has been modified. Please request approval again.',
          status: 'info',
          duration: 3000,
          isClosable: true,
        });
      }
    }
  };

  const getApprovalButtonProps = () => {
    switch (approvalStatus) {
      case 'pending':
        return {
          colorScheme: 'yellow',
          isLoading: true,
          loadingText: 'Awaiting approval...',
          children: 'Approval Pending'
        };
      case 'approved':
        return {
          colorScheme: 'green',
          children: '✅ Approved',
          isDisabled: true
        };
      case 'rejected':
        return {
          colorScheme: 'red',
          children: '❌ Rejected - Revise',
          onClick: () => setApprovalStatus('none')
        };
      default:
        return {
          colorScheme: 'orange',
          children: '👔 Request Approval',
          onClick: handleRequestApproval,
          isDisabled: isRequestingApproval
        };
    }
  };

  const requiresApproval = currentIncidentId.includes('123') || currentIncidentId.includes('456');
  const canPublish = !hasLeaks && (!requiresApproval || approvalStatus === 'approved');

  return (
    <Box minH="100vh" bg={bgColor}>
      {/* Agent Status Modal */}
      <AgentStatusModal 
        isProcessing={isLoading} 
      />

      {/* Slack-style channel header */}
      <Box bg={channelHeaderBg} borderBottom="1px solid" borderColor={useColorModeValue('gray.200', 'gray.700')} py={3}>
        <Container maxW="container.lg">
          <VStack spacing={2} align="start">
            <HStack spacing={2}>
              <Text fontSize="lg" color="gray.500">#</Text>
              <Heading size="md" fontWeight="bold">incident-response</Heading>
              <Badge colorScheme="blue" variant="subtle">
                <Icon as={ViewIcon} boxSize={3} mr={1} />
                3 members
              </Badge>
            </HStack>
            <Text fontSize="sm" color="gray.600">
              🚨 AI-powered incident communications • Use slash commands to generate status updates
            </Text>
          </VStack>
        </Container>
      </Box>

      <Container maxW="container.lg" py={8}>
        <VStack spacing={8} align="stretch">
          {/* Command Bar */}
          <CommandBar onCommand={handleCommand} isLoading={isLoading} />
          
          {/* Guardrail Banner */}
          {hasLeaks && <GuardrailBanner leaks={currentDraft.leaks} />}
          
          {/* Draft Viewer */}
          <DraftViewer 
            draft={currentDraft?.draft || ''} 
            latency={currentDraft?.latency_ms}
          />
          
          {/* Action Buttons */}
          {currentDraft?.draft && (
            <VStack spacing={4}>
              <HStack spacing={4} justify="center" flexWrap="wrap">
                <Button 
                  variant="outline" 
                  onClick={onOpen}
                  isDisabled={isPublishing || isChangingTone || isRequestingApproval}
                >
                  Edit Draft
                </Button>
                
                <Menu>
                  <MenuButton
                    as={Button}
                    rightIcon={<ChevronDownIcon />}
                    variant="outline"
                    colorScheme="purple"
                    isDisabled={isPublishing || isChangingTone || isRequestingApproval}
                    isLoading={isChangingTone}
                    loadingText="Changing tone..."
                  >
                    Change Tone
                  </MenuButton>
                  <MenuList>
                    {toneOptions.map((tone) => (
                      <MenuItem
                        key={tone.value}
                        onClick={() => handleToneChange(tone.value)}
                        isDisabled={currentDraft?.tone === tone.value}
                      >
                        <VStack align="start" spacing={0}>
                          <Text>{tone.label}</Text>
                          <Text fontSize="xs" color="gray.500">{tone.description}</Text>
                        </VStack>
                      </MenuItem>
                    ))}
                  </MenuList>
                </Menu>

                {requiresApproval && (
                  <Button
                    {...getApprovalButtonProps()}
                    isDisabled={isPublishing || isChangingTone || isRequestingApproval}
                  />
                )}
                
                <Button
                  colorScheme="blue"
                  onClick={handlePublish}
                  isDisabled={!canPublish || isPublishing || isChangingTone || isRequestingApproval}
                  isLoading={isPublishing}
                  loadingText="Publishing to #status-page..."
                >
                  Publish to #status-page
                </Button>
              </HStack>
              
              <VStack spacing={1}>
                {currentDraft?.tone && (
                  <Text fontSize="sm" color="gray.500" textAlign="center">
                    Current tone: {toneOptions.find(t => t.value === currentDraft.tone)?.label || currentDraft.tone}
                  </Text>
                )}
                
                {requiresApproval && (
                  <Text fontSize="xs" color="orange.500" textAlign="center">
                    ⚠️ High-severity incident - Management approval required
                  </Text>
                )}
                
                {approvalStatus === 'approved' && (
                  <Text fontSize="xs" color="green.600" textAlign="center">
                    ✅ Approved by: Sarah Chen (Incident Commander), Mike Torres (Comms Lead)
                  </Text>
                )}
              </VStack>
            </VStack>
          )}
        </VStack>
      </Container>
      
      {/* Edit Modal */}
      <EditModal
        isOpen={isOpen}
        onClose={onClose}
        initialDraft={currentDraft?.draft || ''}
        onSave={handleEditSave}
      />
    </Box>
  );
}; 